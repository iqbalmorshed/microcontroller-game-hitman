
hitman.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000432  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000432  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  000004aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000190  00000000  00000000  000004e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000010b  00000000  00000000  00000675  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002a2  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000a24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ca  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b0  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000bbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  6c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  70:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  74:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  78:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  7c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  80:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  84:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  88:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  b6:	0c 94 17 02 	jmp	0x42e	; 0x42e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdlib.h>

int main(void)
{
  be:	4f 92       	push	r4
  c0:	5f 92       	push	r5
  c2:	6f 92       	push	r6
  c4:	7f 92       	push	r7
  c6:	8f 92       	push	r8
  c8:	9f 92       	push	r9
  ca:	af 92       	push	r10
  cc:	bf 92       	push	r11
  ce:	cf 92       	push	r12
  d0:	df 92       	push	r13
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
	int step,cnt,i,random,temp,c1,c2;
	
	DDRA = 0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xff;
  e2:	84 bb       	out	0x14, r24	; 20
	DDRD = 0;
  e4:	11 ba       	out	0x11, r1	; 17
	DDRB = 0x1f;
  e6:	8f e1       	ldi	r24, 0x1F	; 31
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	c0 e0       	ldi	r28, 0x00	; 0
  ec:	d0 e0       	ldi	r29, 0x00	; 0
  ee:	00 e0       	ldi	r16, 0x00	; 0
  f0:	10 e0       	ldi	r17, 0x00	; 0
		
		random=rand()%9;
//		PORTB=0;		

		if(random==0)
			PORTA=1;
  f2:	dd 24       	eor	r13, r13
  f4:	d3 94       	inc	r13
		if(random==1)
			PORTA=2;
		if(random==2)
			PORTA=4;
		if(random==3)
			PORTA=8;
  f6:	a8 e0       	ldi	r26, 0x08	; 8
  f8:	5a 2e       	mov	r5, r26
		if(random==0)
			PORTA=1;
		if(random==1)
			PORTA=2;
		if(random==2)
			PORTA=4;
  fa:	f4 e0       	ldi	r31, 0x04	; 4
  fc:	4f 2e       	mov	r4, r31
//		PORTB=0;		

		if(random==0)
			PORTA=1;
		if(random==1)
			PORTA=2;
  fe:	e2 e0       	ldi	r30, 0x02	; 2
 100:	8e 2e       	mov	r8, r30
		if(random==2)
			PORTA=4;
		if(random==3)
			PORTA=8;
		if(random==4)
			PORTA=16;
 102:	70 e1       	ldi	r23, 0x10	; 16
 104:	77 2e       	mov	r7, r23
		if(random==5)
			PORTA=32;
 106:	60 e2       	ldi	r22, 0x20	; 32
 108:	66 2e       	mov	r6, r22
		if(random==6)
			PORTA=64;
 10a:	50 e4       	ldi	r21, 0x40	; 64
 10c:	a5 2e       	mov	r10, r21
		if(random==7)
			PORTA=128;
 10e:	40 e8       	ldi	r20, 0x80	; 128
 110:	94 2e       	mov	r9, r20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 112:	38 ea       	ldi	r19, 0xA8	; 168
 114:	e3 2e       	mov	r14, r19
 116:	31 e6       	ldi	r19, 0x61	; 97
 118:	f3 2e       	mov	r15, r19
		_delay_ms(100);

		if(temp==cnt)
			PORTB=0x1E;
		else
			PORTB=0x0A;
 11a:	2a e0       	ldi	r18, 0x0A	; 10
 11c:	b2 2e       	mov	r11, r18

		PORTB &=0;	
		_delay_ms(100);

		if(temp==cnt)
			PORTB=0x1E;
 11e:	9e e1       	ldi	r25, 0x1E	; 30
 120:	c9 2e       	mov	r12, r25
 122:	8c c0       	rjmp	.+280    	; 0x23c <main+0x17e>
		
		random=rand()%9;
//		PORTB=0;		

		if(random==0)
			PORTA=1;
 124:	db ba       	out	0x1b, r13	; 27
 126:	0f c0       	rjmp	.+30     	; 0x146 <main+0x88>
		if(random==1)
 128:	21 30       	cpi	r18, 0x01	; 1
 12a:	31 05       	cpc	r19, r1
 12c:	11 f4       	brne	.+4      	; 0x132 <main+0x74>
			PORTA=2;
 12e:	8b ba       	out	0x1b, r8	; 27
 130:	0f c0       	rjmp	.+30     	; 0x150 <main+0x92>
		if(random==2)
 132:	22 30       	cpi	r18, 0x02	; 2
 134:	31 05       	cpc	r19, r1
 136:	11 f4       	brne	.+4      	; 0x13c <main+0x7e>
			PORTA=4;
 138:	4b ba       	out	0x1b, r4	; 27
 13a:	0f c0       	rjmp	.+30     	; 0x15a <main+0x9c>
		if(random==3)
 13c:	23 30       	cpi	r18, 0x03	; 3
 13e:	31 05       	cpc	r19, r1
 140:	11 f4       	brne	.+4      	; 0x146 <main+0x88>
			PORTA=8;
 142:	5b ba       	out	0x1b, r5	; 27
 144:	0f c0       	rjmp	.+30     	; 0x164 <main+0xa6>
		if(random==4)
 146:	24 30       	cpi	r18, 0x04	; 4
 148:	31 05       	cpc	r19, r1
 14a:	11 f4       	brne	.+4      	; 0x150 <main+0x92>
			PORTA=16;
 14c:	7b ba       	out	0x1b, r7	; 27
 14e:	0f c0       	rjmp	.+30     	; 0x16e <main+0xb0>
		if(random==5)
 150:	25 30       	cpi	r18, 0x05	; 5
 152:	31 05       	cpc	r19, r1
 154:	11 f4       	brne	.+4      	; 0x15a <main+0x9c>
			PORTA=32;
 156:	6b ba       	out	0x1b, r6	; 27
 158:	0f c0       	rjmp	.+30     	; 0x178 <main+0xba>
		if(random==6)
 15a:	26 30       	cpi	r18, 0x06	; 6
 15c:	31 05       	cpc	r19, r1
 15e:	11 f4       	brne	.+4      	; 0x164 <main+0xa6>
			PORTA=64;
 160:	ab ba       	out	0x1b, r10	; 27
 162:	0a c0       	rjmp	.+20     	; 0x178 <main+0xba>
		if(random==7)
 164:	27 30       	cpi	r18, 0x07	; 7
 166:	31 05       	cpc	r19, r1
 168:	11 f4       	brne	.+4      	; 0x16e <main+0xb0>
			PORTA=128;
 16a:	9b ba       	out	0x1b, r9	; 27
 16c:	05 c0       	rjmp	.+10     	; 0x178 <main+0xba>
		if(random==8)
 16e:	28 30       	cpi	r18, 0x08	; 8
 170:	31 05       	cpc	r19, r1
 172:	11 f4       	brne	.+4      	; 0x178 <main+0xba>
		{
			PORTA=0;
 174:	1b ba       	out	0x1b, r1	; 27
			PORTB=1;
 176:	d8 ba       	out	0x18, r13	; 24
 178:	40 e0       	ldi	r20, 0x00	; 0
 17a:	50 e0       	ldi	r21, 0x00	; 0

		//_delay_ms(1000);
		
		for(i=0;i<=30;i++)
		{
			if(PIND==1 && random==0)
 17c:	80 b3       	in	r24, 0x10	; 16
 17e:	81 30       	cpi	r24, 0x01	; 1
 180:	19 f4       	brne	.+6      	; 0x188 <main+0xca>
 182:	21 15       	cp	r18, r1
 184:	31 05       	cpc	r19, r1
 186:	81 f1       	breq	.+96     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==2 && random==1)
 188:	80 b3       	in	r24, 0x10	; 16
 18a:	82 30       	cpi	r24, 0x02	; 2
 18c:	19 f4       	brne	.+6      	; 0x194 <main+0xd6>
 18e:	21 30       	cpi	r18, 0x01	; 1
 190:	31 05       	cpc	r19, r1
 192:	51 f1       	breq	.+84     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==4 && random==2)
 194:	80 b3       	in	r24, 0x10	; 16
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	19 f4       	brne	.+6      	; 0x1a0 <main+0xe2>
 19a:	22 30       	cpi	r18, 0x02	; 2
 19c:	31 05       	cpc	r19, r1
 19e:	21 f1       	breq	.+72     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==8 && random==3)
 1a0:	80 b3       	in	r24, 0x10	; 16
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	19 f4       	brne	.+6      	; 0x1ac <main+0xee>
 1a6:	23 30       	cpi	r18, 0x03	; 3
 1a8:	31 05       	cpc	r19, r1
 1aa:	f1 f0       	breq	.+60     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==16 && random==4)
 1ac:	80 b3       	in	r24, 0x10	; 16
 1ae:	80 31       	cpi	r24, 0x10	; 16
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <main+0xfa>
 1b2:	24 30       	cpi	r18, 0x04	; 4
 1b4:	31 05       	cpc	r19, r1
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==32 && random==5)
 1b8:	80 b3       	in	r24, 0x10	; 16
 1ba:	80 32       	cpi	r24, 0x20	; 32
 1bc:	19 f4       	brne	.+6      	; 0x1c4 <main+0x106>
 1be:	25 30       	cpi	r18, 0x05	; 5
 1c0:	31 05       	cpc	r19, r1
 1c2:	91 f0       	breq	.+36     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==64 && random==6)
 1c4:	80 b3       	in	r24, 0x10	; 16
 1c6:	80 34       	cpi	r24, 0x40	; 64
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0x112>
 1ca:	26 30       	cpi	r18, 0x06	; 6
 1cc:	31 05       	cpc	r19, r1
 1ce:	61 f0       	breq	.+24     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PIND==128 && random==7)
 1d0:	80 b3       	in	r24, 0x10	; 16
 1d2:	80 38       	cpi	r24, 0x80	; 128
 1d4:	19 f4       	brne	.+6      	; 0x1dc <main+0x11e>
 1d6:	27 30       	cpi	r18, 0x07	; 7
 1d8:	31 05       	cpc	r19, r1
 1da:	31 f0       	breq	.+12     	; 0x1e8 <main+0x12a>
			{
				cnt++;
				break;
			}
			if(PINB==129 && random==8)
 1dc:	86 b3       	in	r24, 0x16	; 22
 1de:	81 38       	cpi	r24, 0x81	; 129
 1e0:	29 f4       	brne	.+10     	; 0x1ec <main+0x12e>
 1e2:	28 30       	cpi	r18, 0x08	; 8
 1e4:	31 05       	cpc	r19, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <main+0x12e>
			{
				cnt++;
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	09 c0       	rjmp	.+18     	; 0x1fe <main+0x140>
 1ec:	c7 01       	movw	r24, r14
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x130>
		}


		//_delay_ms(1000);
		
		for(i=0;i<=30;i++)
 1f2:	4f 5f       	subi	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255
 1f6:	4f 31       	cpi	r20, 0x1F	; 31
 1f8:	51 05       	cpc	r21, r1
 1fa:	09 f0       	breq	.+2      	; 0x1fe <main+0x140>
 1fc:	bf cf       	rjmp	.-130    	; 0x17c <main+0xbe>
			_delay_ms(100);

		}
		
		
		PORTC=(cnt/10)*16+(cnt%10);
 1fe:	ce 01       	movw	r24, r28
 200:	6a e0       	ldi	r22, 0x0A	; 10
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 208:	9b 01       	movw	r18, r22
 20a:	84 e0       	ldi	r24, 0x04	; 4
 20c:	22 0f       	add	r18, r18
 20e:	33 1f       	adc	r19, r19
 210:	8a 95       	dec	r24
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x14e>
 214:	ce 01       	movw	r24, r28
 216:	6a e0       	ldi	r22, 0x0A	; 10
 218:	70 e0       	ldi	r23, 0x00	; 0
 21a:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 21e:	82 0f       	add	r24, r18
 220:	85 bb       	out	0x15, r24	; 21

		PORTB &=0;	
 222:	88 b3       	in	r24, 0x18	; 24
 224:	18 ba       	out	0x18, r1	; 24
 226:	c7 01       	movw	r24, r14
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <main+0x16a>
		_delay_ms(100);

		if(temp==cnt)
 22c:	0c 17       	cp	r16, r28
 22e:	1d 07       	cpc	r17, r29
 230:	19 f4       	brne	.+6      	; 0x238 <main+0x17a>
			PORTB=0x1E;
 232:	c8 ba       	out	0x18, r12	; 24
 234:	e8 01       	movw	r28, r16
 236:	02 c0       	rjmp	.+4      	; 0x23c <main+0x17e>
		else
			PORTB=0x0A;
 238:	b8 ba       	out	0x18, r11	; 24
 23a:	8e 01       	movw	r16, r28
	step=0;
	temp=cnt=c1=c2=0;
	while(step<=20)
	{
		
		random=rand()%9;
 23c:	0e 94 ab 01 	call	0x356	; 0x356 <rand>
 240:	69 e0       	ldi	r22, 0x09	; 9
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	0e 94 29 01 	call	0x252	; 0x252 <__divmodhi4>
 248:	9c 01       	movw	r18, r24
//		PORTB=0;		

		if(random==0)
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	09 f4       	brne	.+2      	; 0x250 <main+0x192>
 24e:	6a cf       	rjmp	.-300    	; 0x124 <main+0x66>
 250:	6b cf       	rjmp	.-298    	; 0x128 <main+0x6a>

00000252 <__divmodhi4>:
 252:	97 fb       	bst	r25, 7
 254:	09 2e       	mov	r0, r25
 256:	07 26       	eor	r0, r23
 258:	0a d0       	rcall	.+20     	; 0x26e <__divmodhi4_neg1>
 25a:	77 fd       	sbrc	r23, 7
 25c:	04 d0       	rcall	.+8      	; 0x266 <__divmodhi4_neg2>
 25e:	0c d0       	rcall	.+24     	; 0x278 <__udivmodhi4>
 260:	06 d0       	rcall	.+12     	; 0x26e <__divmodhi4_neg1>
 262:	00 20       	and	r0, r0
 264:	1a f4       	brpl	.+6      	; 0x26c <__divmodhi4_exit>

00000266 <__divmodhi4_neg2>:
 266:	70 95       	com	r23
 268:	61 95       	neg	r22
 26a:	7f 4f       	sbci	r23, 0xFF	; 255

0000026c <__divmodhi4_exit>:
 26c:	08 95       	ret

0000026e <__divmodhi4_neg1>:
 26e:	f6 f7       	brtc	.-4      	; 0x26c <__divmodhi4_exit>
 270:	90 95       	com	r25
 272:	81 95       	neg	r24
 274:	9f 4f       	sbci	r25, 0xFF	; 255
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <do_rand>:
 2a0:	af 92       	push	r10
 2a2:	bf 92       	push	r11
 2a4:	cf 92       	push	r12
 2a6:	df 92       	push	r13
 2a8:	ef 92       	push	r14
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24
 2b6:	a8 80       	ld	r10, Y
 2b8:	b9 80       	ldd	r11, Y+1	; 0x01
 2ba:	ca 80       	ldd	r12, Y+2	; 0x02
 2bc:	db 80       	ldd	r13, Y+3	; 0x03
 2be:	a1 14       	cp	r10, r1
 2c0:	b1 04       	cpc	r11, r1
 2c2:	c1 04       	cpc	r12, r1
 2c4:	d1 04       	cpc	r13, r1
 2c6:	41 f4       	brne	.+16     	; 0x2d8 <do_rand+0x38>
 2c8:	84 e2       	ldi	r24, 0x24	; 36
 2ca:	a8 2e       	mov	r10, r24
 2cc:	89 ed       	ldi	r24, 0xD9	; 217
 2ce:	b8 2e       	mov	r11, r24
 2d0:	8b e5       	ldi	r24, 0x5B	; 91
 2d2:	c8 2e       	mov	r12, r24
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	d8 2e       	mov	r13, r24
 2d8:	c6 01       	movw	r24, r12
 2da:	b5 01       	movw	r22, r10
 2dc:	2d e1       	ldi	r18, 0x1D	; 29
 2de:	33 ef       	ldi	r19, 0xF3	; 243
 2e0:	41 e0       	ldi	r20, 0x01	; 1
 2e2:	50 e0       	ldi	r21, 0x00	; 0
 2e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divmodsi4>
 2e8:	27 ea       	ldi	r18, 0xA7	; 167
 2ea:	31 e4       	ldi	r19, 0x41	; 65
 2ec:	40 e0       	ldi	r20, 0x00	; 0
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	0e 94 bb 01 	call	0x376	; 0x376 <__mulsi3>
 2f4:	7b 01       	movw	r14, r22
 2f6:	8c 01       	movw	r16, r24
 2f8:	c6 01       	movw	r24, r12
 2fa:	b5 01       	movw	r22, r10
 2fc:	2d e1       	ldi	r18, 0x1D	; 29
 2fe:	33 ef       	ldi	r19, 0xF3	; 243
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	50 e0       	ldi	r21, 0x00	; 0
 304:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__divmodsi4>
 308:	ca 01       	movw	r24, r20
 30a:	b9 01       	movw	r22, r18
 30c:	2c ee       	ldi	r18, 0xEC	; 236
 30e:	34 ef       	ldi	r19, 0xF4	; 244
 310:	4f ef       	ldi	r20, 0xFF	; 255
 312:	5f ef       	ldi	r21, 0xFF	; 255
 314:	0e 94 bb 01 	call	0x376	; 0x376 <__mulsi3>
 318:	6e 0d       	add	r22, r14
 31a:	7f 1d       	adc	r23, r15
 31c:	80 1f       	adc	r24, r16
 31e:	91 1f       	adc	r25, r17
 320:	97 ff       	sbrs	r25, 7
 322:	04 c0       	rjmp	.+8      	; 0x32c <do_rand+0x8c>
 324:	61 50       	subi	r22, 0x01	; 1
 326:	70 40       	sbci	r23, 0x00	; 0
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 48       	sbci	r25, 0x80	; 128
 32c:	68 83       	st	Y, r22
 32e:	79 83       	std	Y+1, r23	; 0x01
 330:	8a 83       	std	Y+2, r24	; 0x02
 332:	9b 83       	std	Y+3, r25	; 0x03
 334:	9b 01       	movw	r18, r22
 336:	3f 77       	andi	r19, 0x7F	; 127
 338:	c9 01       	movw	r24, r18
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	ff 90       	pop	r15
 344:	ef 90       	pop	r14
 346:	df 90       	pop	r13
 348:	cf 90       	pop	r12
 34a:	bf 90       	pop	r11
 34c:	af 90       	pop	r10
 34e:	08 95       	ret

00000350 <rand_r>:
 350:	0e 94 50 01 	call	0x2a0	; 0x2a0 <do_rand>
 354:	08 95       	ret

00000356 <rand>:
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <do_rand>
 35e:	08 95       	ret

00000360 <srand>:
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	80 93 00 01 	sts	0x0100, r24
 368:	90 93 01 01 	sts	0x0101, r25
 36c:	a0 93 02 01 	sts	0x0102, r26
 370:	b0 93 03 01 	sts	0x0103, r27
 374:	08 95       	ret

00000376 <__mulsi3>:
 376:	62 9f       	mul	r22, r18
 378:	d0 01       	movw	r26, r0
 37a:	73 9f       	mul	r23, r19
 37c:	f0 01       	movw	r30, r0
 37e:	82 9f       	mul	r24, r18
 380:	e0 0d       	add	r30, r0
 382:	f1 1d       	adc	r31, r1
 384:	64 9f       	mul	r22, r20
 386:	e0 0d       	add	r30, r0
 388:	f1 1d       	adc	r31, r1
 38a:	92 9f       	mul	r25, r18
 38c:	f0 0d       	add	r31, r0
 38e:	83 9f       	mul	r24, r19
 390:	f0 0d       	add	r31, r0
 392:	74 9f       	mul	r23, r20
 394:	f0 0d       	add	r31, r0
 396:	65 9f       	mul	r22, r21
 398:	f0 0d       	add	r31, r0
 39a:	99 27       	eor	r25, r25
 39c:	72 9f       	mul	r23, r18
 39e:	b0 0d       	add	r27, r0
 3a0:	e1 1d       	adc	r30, r1
 3a2:	f9 1f       	adc	r31, r25
 3a4:	63 9f       	mul	r22, r19
 3a6:	b0 0d       	add	r27, r0
 3a8:	e1 1d       	adc	r30, r1
 3aa:	f9 1f       	adc	r31, r25
 3ac:	bd 01       	movw	r22, r26
 3ae:	cf 01       	movw	r24, r30
 3b0:	11 24       	eor	r1, r1
 3b2:	08 95       	ret

000003b4 <__divmodsi4>:
 3b4:	97 fb       	bst	r25, 7
 3b6:	09 2e       	mov	r0, r25
 3b8:	05 26       	eor	r0, r21
 3ba:	0e d0       	rcall	.+28     	; 0x3d8 <__divmodsi4_neg1>
 3bc:	57 fd       	sbrc	r21, 7
 3be:	04 d0       	rcall	.+8      	; 0x3c8 <__divmodsi4_neg2>
 3c0:	14 d0       	rcall	.+40     	; 0x3ea <__udivmodsi4>
 3c2:	0a d0       	rcall	.+20     	; 0x3d8 <__divmodsi4_neg1>
 3c4:	00 1c       	adc	r0, r0
 3c6:	38 f4       	brcc	.+14     	; 0x3d6 <__divmodsi4_exit>

000003c8 <__divmodsi4_neg2>:
 3c8:	50 95       	com	r21
 3ca:	40 95       	com	r20
 3cc:	30 95       	com	r19
 3ce:	21 95       	neg	r18
 3d0:	3f 4f       	sbci	r19, 0xFF	; 255
 3d2:	4f 4f       	sbci	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255

000003d6 <__divmodsi4_exit>:
 3d6:	08 95       	ret

000003d8 <__divmodsi4_neg1>:
 3d8:	f6 f7       	brtc	.-4      	; 0x3d6 <__divmodsi4_exit>
 3da:	90 95       	com	r25
 3dc:	80 95       	com	r24
 3de:	70 95       	com	r23
 3e0:	61 95       	neg	r22
 3e2:	7f 4f       	sbci	r23, 0xFF	; 255
 3e4:	8f 4f       	sbci	r24, 0xFF	; 255
 3e6:	9f 4f       	sbci	r25, 0xFF	; 255
 3e8:	08 95       	ret

000003ea <__udivmodsi4>:
 3ea:	a1 e2       	ldi	r26, 0x21	; 33
 3ec:	1a 2e       	mov	r1, r26
 3ee:	aa 1b       	sub	r26, r26
 3f0:	bb 1b       	sub	r27, r27
 3f2:	fd 01       	movw	r30, r26
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <__udivmodsi4_ep>

000003f6 <__udivmodsi4_loop>:
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	ee 1f       	adc	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	a2 17       	cp	r26, r18
 400:	b3 07       	cpc	r27, r19
 402:	e4 07       	cpc	r30, r20
 404:	f5 07       	cpc	r31, r21
 406:	20 f0       	brcs	.+8      	; 0x410 <__udivmodsi4_ep>
 408:	a2 1b       	sub	r26, r18
 40a:	b3 0b       	sbc	r27, r19
 40c:	e4 0b       	sbc	r30, r20
 40e:	f5 0b       	sbc	r31, r21

00000410 <__udivmodsi4_ep>:
 410:	66 1f       	adc	r22, r22
 412:	77 1f       	adc	r23, r23
 414:	88 1f       	adc	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	1a 94       	dec	r1
 41a:	69 f7       	brne	.-38     	; 0x3f6 <__udivmodsi4_loop>
 41c:	60 95       	com	r22
 41e:	70 95       	com	r23
 420:	80 95       	com	r24
 422:	90 95       	com	r25
 424:	9b 01       	movw	r18, r22
 426:	ac 01       	movw	r20, r24
 428:	bd 01       	movw	r22, r26
 42a:	cf 01       	movw	r24, r30
 42c:	08 95       	ret

0000042e <_exit>:
 42e:	f8 94       	cli

00000430 <__stop_program>:
 430:	ff cf       	rjmp	.-2      	; 0x430 <__stop_program>
